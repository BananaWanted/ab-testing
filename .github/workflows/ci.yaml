name: CI
on:
  push:
    branches:
      - master
  pull_request: {}

jobs:
  js:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [ '12', '10' ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.node }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - uses: actions/cache@v1
        id: node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node }}-node-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-
      - run: |
          yarn install
          yarn build
          yarn lerna bootstrap
          yarn lint
          yarn test
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel: true
          path-to-lcov: ./coverage/lcov.info # optional (default value)

  py:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [2.7, 3.5, 3.6, 3.7, 3.8]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v1
        with:
          path: ~/.cache/pip # This path is specific to Ubuntu
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('packages/py-ab-testing/*') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-
      - name: Install dependencies
        working-directory: ./packages/py-ab-testing
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Lint with flake8
        working-directory: ./packages/py-ab-testing
        run: |
          pip install flake8
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test
        working-directory: ./packages/py-ab-testing
        env:
          COVERALLS_PARALLEL: true
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          pip install -r requirements.txt
          pip install -e .
          pytest \
            --cov-config=.coveragerc \
            --cov=ABTesting \
            --cov-branch \
            --cov-report=html:cov.html \
            --cov-report=term-missing:skip-covered \
            tests
          coveralls

  finish_coveralls:
    runs-on: ubuntu-latest
    needs:
      - js
      - py
    steps:
      - name: Coveralls
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel: true
          parallel-finished: true

  publish_to_prod:
    if: "!contains(github.event.head_commit.author.name, 'GitHub Actions') && github.event_name == 'push' && github.ref == 'refs/heads/master'"
    runs-on: ubuntu-latest
    needs:
      - js
      - py
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_ACCESS_TOKEN }}
      - name: Set up Node
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - run: |
          git config --global user.name "GitHub Actions"
          git fetch --depth=1 origin $GITHUB_REF
      - name: Publish to NPM
        run: |
          yarn install
          cp npmrc-ci .npmrc
          yarn lerna version --conventional-commits --yes
          yarn lerna publish from-git --yes
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish to Pypi
        working-directory: ./packages/py-ab-testing
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          python -m pip install --upgrade pip setuptools wheel twine
          python setup.py sdist bdist_wheel
          twine upload dist/*
